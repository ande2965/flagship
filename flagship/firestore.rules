rules_version = '2';

// function isUserOnCampaign(database, campaignId) {
//   return campaignId != null && 
//   request.auth.uid in get(/databases/$(database)/documents/campaigns/$(campaignId)).data.playerUids;
// }
function isUserOnCampaign(campaignId) {
  return campaignId != null && 
    request.auth.uid in get(/databases/{database}/documents/campaigns/$(campaignId)).data.playerUids;
}

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }
    match /settings/{userId} {
      allow read, update, delete, create: if request.auth.uid == userId;
    }
    match /fleets/{fleetId} {
      allow read: if true;
      allow update: if request.auth.uid == resource.data.ownerUid || 
        (resource.data.campaignId != null && isUserOnCampaign(resource.data.campaignId));
      allow delete: if request.auth.uid == resource.data.ownerUid;
      allow create: if request.auth.uid != null;
    }
    match /campaigns/{campaignId} {
      allow read, update: if request.auth.uid in resource.data.playerUids || request.auth.uid == resource.data.ownerUid;
      allow delete: if request.auth.uid == resource.data.ownerUid;
      allow create: if request.auth.uid != null;
    }
    match /invites/{inviteToken} {
      allow read: if true;
      allow create, update, delete: if request.auth.uid != null;
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}